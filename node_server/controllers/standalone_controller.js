// Standalone code for Circles World

// Adding Circles code parts when html body is done loading
// -------------------------------------------------------------------------------------------------------------------------------------------------------
window.addEventListener('load', function() 
{
    console.log('start standalone');
    
    // Getting user scripts to be reloaded
    const userScripts = document.getElementsByTagName('script');

    let userScriptsFiltered = [];
    let length = userScripts.length;
    
    for (let i = 0; i < length; i++)
    {
        if (userScripts[i].src !== 'https://ee5d-142-161-79-245.ngrok-free.app/standalone-circles')
        {
            let splitSRC = userScripts[i].src.split('/');
            userScriptsFiltered.push('scripts/' + splitSRC[splitSRC.length - 1]);

            // Removing user script
            userScripts[i].remove();

            // Setting the index and length back as an element was removed
            i -= 1;
            length -= 1;
        }
    }

    // Adding code to the head of the HTML document
    document.getElementsByTagName('head')[0].innerHTML += '<title>Welcome to Circles! Currently visiting WORLDNAME__</title> <!-- libraries --> <!-- webrtc shim from https://webrtc.github.io/adapter/adapter-latest.js --> <script src="/global/js/libs/adapter-latest.js"></script> <script src="/global/js/libs/aframe-master.min.js"></script> <script src="/global/js/libs/networked-aframe.min.js"></script> <script src="/global/js/libs/naf-janus-adapter.min.js"></script> <script src="/global/js/libs/aframe-extras.animation-mixer.js"></script> <script src="/global/js/libs/aframe-extras.controls.min.js"></script> <script src="/global/js/libs/aframe-extras.pathfinding.min.js"></script> <script src="/global/js/libs/checkpoint.js"></script> <script src="/global/js/libs/pdf.min.js"></script> <script src="/socket.io/socket.io.js"></script> <!-- components --> <script src="/global/js/components/aframe-fps-counter-component.min.js"></script> <script src="/global/js/components/aframe-mirror.js"></script> <!-- circles code (needs to be last code as dependent on other aspects )--> <script src="/global/js/circles_client_bundle.min.js"></script> <!-- need a user gesture to allow sound on some browsers i.e. iOS --> <link rel="stylesheet" href="/global/css/user-gesture.css"> ';

    // Reloading user scripts
    for (const script of userScriptsFiltered)
    {
        let newScriptElement = document.createElement('script');
        newScriptElement.setAttribute('src', script);

        document.getElementsByTagName('head')[0].appendChild(newScriptElement);
    }
    
    // Adding code to the body of the HTML document
    let bodyHTML = document.getElementsByTagName('body')[0].innerHTML;

    bodyHTML = bodyHTML.replace(/<circles-start-ui(\s+)?>(\s+)?<\/circles-start-ui>/i, '<!-- html to get appropriate user interactions to trigger permission and user choices. Turning off for now until we figure out permissions with link traversal --> <div id="user-gesture-overlay" >     <div id="Permissions" class="overlay">         <img class="logo" src="/global/assets/textures/logos/circles_logo.svg" alt="Circles logo" />                  <div class="suboverlay">         <p class="title">Permissions</p>                      <div id="user-microphone-wrapper" class="grid2col">             <span class="label">Microphone</span>             <div class="onoffswitch">             <input type="checkbox" name="onoffswitch_mic" class="onoffswitch-checkbox" id="switch_mic" autocomplete="off">             <label class="onoffswitch-label" for="switch_mic">                 <span class="onoffswitch-inner"></span>                 <span class="onoffswitch-switch"></span>             </label>             </div>         </div>         <input id="user-gesture-enter" class="user-gesture-button" type="submit" value="Enter Circles">         <input id="wardrobe-enter" class="user-gesture-button"  type="submit" value="Customize Avatar">         <!-- loading gif from: https://www.behance.net/gallery/31234507/Open-source-Loading-GIF-Icons-Vol-1 -->         <img id="loading-animation-enter" src="/global/images/loading.gif">         </div>     </div> </div> <div id="ui_wrapper">     <input id="button_microphone" type="submit" value=""> </div>');
    bodyHTML = bodyHTML.replace(/circles_scene_properties/i, 'renderer="antialias: true;          colorManagement: true;          sortObjects: false;          foveationLevel: 3;          highRefreshRate: true;          physicallyCorrectLights: true;          logarithmicDepthBuffer: false;          precision: high;" networked-scene="room: __ROOM_NAME__;                  connectOnLoad: true;                  onConnect: onConnect;                  audio: false;                  debug: false;                  adapter: socketio;                  serverURL: /"                      shadow="autoUpdate:false; type:basic;" vr-mode-ui="enabled:true;" loading-screen="enabled:false;" device-orientation-permission-ui="enabled:true;" circles-enter-ui circles-platform-scene-shadows');
    bodyHTML = bodyHTML.replace(/<circles-assets(\s+)?>(\s+)?<\/circles-assets>/i, '<template id="circles-user-template">   <a-entity>     <!-- user_cam_rig => movement-controls="speed:0.1;" -->     <!-- avatar => camera look-controls="pointerLockEnabled:false;"  spawn-in-circle="radius:3" -->     <!-- ="gltf_head:__MODEL_HEAD__; gltf_hair:__MODEL_HAIR__; gltf_body:__MODEL_BODY__; color_head:__COLOR_HEAD__; color_hair:__COLOR_HAIR__; color_body:__COLOR_BODY__;" -->     <!-- <a-entity class="user_cam_rig"> -->       <a-entity   class="avatar"                    position="0 __USER_HEIGHT__ 0"                   circles-user-networked                   circles-avatar-construction>         <a-entity class="nametag_front avatar_node" text="align:center;" position="0 0.7 0" rotation="0 0 0" scale="3 3 3">           <a-entity class="deviceicon_front" position="0 -0.06 0" geometry="primitive:plane; width:0.07; height:0.07;" material="shader:flat; transparent:true;"></a-entity>         </a-entity>         <a-entity class="nametag_back avatar_node" text="align:center;" position="0 0.7 0" rotation="0 180 0" scale="3 3 3">             <a-entity class="deviceicon_back" position="0 -0.06 0" geometry="primitive:plane; width:0.07; height:0.07;" material="shader:flat; transparent:true;"></a-entity>         </a-entity>         <a-entity   class="user_head avatar_node"                     networked-audio-source                     gltf-model                     circles-color                     circles-shadow="cast:true; receive:true; applyToChildren:false;">           <a-entity class="head_holder" position="0 0 -2.0"></a-entity> <!-- this is where things are held. Will have another for hands -->           <a-entity   class="user_face_express"                       geometry="primitive:plane; width:0.3; height:0.3;"                       material="shader:flat; src:__FACE_MAP__; transparent:true; side:back; color:#000;"                       position="0.0 0.0 -0.1">           </a-entity>           <a-entity   class="user_hair"                       gltf-model                       circles-color                       circles-shadow="cast:true; receive:true; applyToChildren:false;">           </a-entity>         </a-entity>         <a-entity   class="user_body avatar_node"                     gltf-model                     circles-color                     circles-shadow="cast:true; receive:true; applyToChildren:false;"                     position="0.0 -0.5 0.0">           <!-- <a-entity   class="user_boundaries avatar_node"                       circles-boundaries="color:rgb(255,255,255); alpha:1.0;"                       circles-shadow="cast:false; receive:false; applyToChildren:false;"                       scale="2.0 4.0 2.0">           </a-entity> -->         </a-entity>       </a-entity>     <!-- </a-entity> -->   </a-entity> </template> <template id="circles-interactive-object-template">   <a-entity>   </a-entity> </template> <template id="circles-basic-object-template">   <a-entity>   </a-entity> </template> <template id="circles-artefact-template">   <a-entity>   </a-entity> </template> <template id="circles-text-template">   <a-entity>   </a-entity> </template>');
    bodyHTML = bodyHTML.replace(/<circles-manager-avatar(\s+)?>(\s+)?<\/circles-manager-avatar>/i, '<!-- our "game manager" object --> <a-entity id="circles-manager" circles-manager="world:__WORLDNAME__; user:__VISIBLENAME__"></a-entity> <!-- our avatar -->  <a-entity   id="Player1"             class="user_cam_rig"             circles-add-camera-equipment             circles-head-model="__MODEL_HEAD__"             circles-hair-model="__MODEL_HAIR__"             circles-body-model="__MODEL_BODY__"             circles-head-color="__COLOR_HEAD__"             circles-hair-color="__COLOR_HAIR__"             circles-body-color="__COLOR_BODY__"             circles-visiblename="__VISIBLENAME__"             circles-usertype="__USERTYPE__"             > </a-entity>');
    bodyHTML = bodyHTML.replace(/<circles-end-scripts(\s+)?>(\s+)?<\/circles-end-scripts>/i, '<script>   /* Prompt for audio */   if (CIRCLES.CONSTANTS.CIRCLES_WEBRTC_ENABLED && CIRCLES.CONSTANTS.CIRCLES_MIC_ENABLED) {     document.addEventListener("DOMContentLoaded", () => {       console.log("DOMContentLoaded");       const scene = document.querySelector("a-scene");       scene.addEventListener("adapter-ready", ({ detail: adapter }) => {         console.log("adapter-ready");         const clientId = CIRCLES.getUUID(); /* generate a random 16 characters string, but you can use a uuid4 for example */         adapter.setClientId(clientId);         navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {           adapter.setLocalMediaStream(stream).then(() => {             /* Note that networked-scene audio:true option has no effect with the janus adapter */             NAF.connection.adapter.enableMicrophone(false); /* set it to false if you want to be muted initially. */           });         }).catch(err => {           console.warn("Microphone access not allowed. This client will not broadcast audio.");         });       });     });   }   else {     /* disable HTML mic elements */     document.querySelector("#button_microphone").style.display = "none";     document.querySelector("#user-microphone-wrapper").style.display = "none";   }   /* naf schemas */   NAF.schemas.add({     template: "#" + CIRCLES.NETWORKED_TEMPLATES.AVATAR,     components: [       "position",       "rotation",       {         selector: ".user_cam_rig",         component: "position",       },       {         selector: ".user_cam_rig",         component: "rotation",       },       {         selector: ".avatar",         component: "position",       },       {         selector: ".avatar",         component: "rotation",       },       {         selector: ".nametag_front",         component: "visible",       },       {         selector: ".nametag_front",         component: "position",       },       {         selector: ".nametag_front",         component: "scale",       },       {         selector: ".deviceicon_front",         component: "material",       },       {         selector: ".deviceicon_back",         component: "material",       },       {         selector: ".deviceicon_front",         component: "position",       },       {         selector: ".deviceicon_back",         component: "position",       },       {         selector: ".avatar",         component: "circles-user-networked",       },       {         selector: ".nametag_back",         component: "visible",       },       {         selector: ".nametag_back",         component: "position",       },       {         selector: ".nametag_back",         component: "scale",       },       {         selector: ".nametag_back",         component: "rotation",       },       {         selector: ".user_head",         component: "visible",       },       {         selector: ".user_head",         component: "position",       },       {         selector: ".user_head",         component: "rotation",       },       {         selector: ".user_body",         component: "visible",       },       {         selector: ".user_body",         component: "position",       },       /*        {         selector: ".user_body",         component: "rotation",       },       */       {         selector: ".user_face_express",         component: "position",       },     ]   });   NAF.schemas.add({     template: "#" + CIRCLES.NETWORKED_TEMPLATES.INTERACTIVE_OBJECT,     components: [       "class",       "position",       "rotation",       "scale",       "gltf-model",       "geometry",       "material",       "obj-model",       "circles-object-world",       "circles-interactive-object",       /* "circles-interactive-visible",  //want this hideen if released in another world ... */       "circles-pickup-object",       "circles-pickup-networked",       "shadow",       /*       "class"       {         selector: ".interactive",         component: "gltf-model",       },       */     ]   });   NAF.schemas.add({     template: "#" + CIRCLES.NETWORKED_TEMPLATES.BASIC_OBJECT,     components: [       "class",       "position",       "rotation",       "scale",       "gltf-model",       "geometry",       "material",       "obj-model",       "text",       "circles-object-world",       "circles-interactive-object",       /* "circles-interactive-visible",  //want this hideen if released in another world ... */       /* "circles-pickup-object", */       "circles-networked-basic",       "shadow",       /*       "class"       {         selector: ".interactive",         component: "gltf-model",       },       */     ]   });   NAF.schemas.add({     template: "#" + CIRCLES.NETWORKED_TEMPLATES.ARTEFACT,     components: [       "class",       "position",       "rotation",       "scale",       "gltf-model",       "geometry",       "material",       "obj-model",       "circles-object-world",       /* "circles-sphere-env-map", */       "circles-interactive-object",       /* "circles-interactive-visible", */       /* "circles-artefact", */       "circles-pickup-networked",       "circles-pickup-object",       "shadow",     ]   });   NAF.schemas.add({     template: "#" + CIRCLES.NETWORKED_TEMPLATES.TEXT,     components: [       "position",       "rotation",       "scale",       "text",       "material"     ]   });   /* Called by Networked-Aframe when connected to server */   function onConnect () {     console.log("custom onConnect: ", new Date());     CIRCLES.setupCirclesWebsocket();     /*      * depending on scene loaded results in the mic button not working if clicked too fast      * it also means the mic button has no effect (when "adapter-ready" fires the mic also cannot be enabled/diabled) ...      * I am not sure this is the best way to do this; but audio feedback is even worse ...      */     document.querySelector("#loading-animation-enter").style.display="none";     document.querySelectorAll(".user-gesture-button").forEach((elem)=> {       /* if entering the wardrobe world no need to show "enter wardrobe button" */       if (window.location.pathname.match(/wardrobe/i)) {         if (elem.id !== "wardrobe-enter") {           elem.style.display="block";         }       }       else {         elem.style.display="block";       }     });     /* need to re-direct to wardrobe world if the user isn"t "dressed" yet      * make sure we add all urlParams together from provided link and existing url bar      */     /* const queryString = ((window.location.search) ? window.location.search + "&" : "?") + ((urlArr.length > 1) ? urlArr[1] : window.location.search); */     /* we want to know if we have visited a world already during this session ...      * const urlParams = new URLSearchParams(queryString);      */     /*     urlParams.append("last_route", window.location.pathname);     if (!urlParams.has("last_route")) {       urlParams.append("last_visited", "1");     }     */          /* mic sometimes is on for some reason */     if (CIRCLES.CONSTANTS.CIRCLES_WEBRTC_ENABLED && CIRCLES.CONSTANTS.CIRCLES_MIC_ENABLED) {       NAF.connection.adapter.enableMicrophone(false);     }   } </script>');

    document.getElementsByTagName('body')[0].innerHTML = bodyHTML;
});
// -------------------------------------------------------------------------------------------------------------------------------------------------------

